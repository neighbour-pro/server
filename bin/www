#!/usr/bin/env node

const http = require('http');

let app = require('../app');

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404).json({
    code: 404,
    message: 'Resource not found',
  });
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500).json({
      code: 500,
      message: 'Server error'
    });
  }
});

let server = http.createServer(app);
const io = require('socket.io')(server);
io.on('connection', function(socket){
  socket.on('message', function(data){
    // io.emit('msg', data);
    console.log('Message'+data)
    io.to(data.conversation_id).emit('msg', data);
  });
  socket.on('join', function(room) {
    console.log('Joined', room)
    socket.join(room);
  });
});

server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});
